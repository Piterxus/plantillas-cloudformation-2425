AWSTemplateFormatVersion: "2010-09-09"
Description: "Plantilla para crear una VPC con subredes públicas/privadas, NAT Gateway y VPC Peering"

Parameters:
  EnvironmentType:
    Description: "Tipo de ambiente (Dev/Prod)"
    Type: String
    Default: Dev
    AllowedValues: [Dev, Prod]
    ConstraintDescription: "Debe ser Dev o Prod"

  PublicSubnet1CIDR:
    Description: "CIDR block para la subred pública 1"
    Type: String
    Default: 20.0.1.0/24

  PublicSubnet2CIDR:
    Description: "CIDR block para la subred pública 2"
    Type: String
    Default: 20.0.2.0/24

  PrivateSubnet1CIDR:
    Description: "CIDR block para la subred privada 1"
    Type: String
    Default: 20.0.3.0/24

  PrivateSubnet2CIDR:
    Description: "CIDR block para la subred privada 2"
    Type: String
    Default: 20.0.4.0/24

  PeerVPCId:
    Description: "ID de la VPC destino para el peering"
    Type: String
    Default: ""

  PeerVPCCidr:
    Description: "CIDR block de la VPC destino para el peering"
    Type: String
    Default: "10.0.0.0/16"

Mappings:
  CIDRRanges:
    Dev:
      VPCCIDR: "20.0.0.0/16"
    Prod:
      VPCCIDR: "20.0.0.0/16"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CIDRRanges, !Ref EnvironmentType, VPCCIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NATGW

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRT1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRT2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: HasPeerVPC
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: !Ref PeerVPCId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Peering

  PeeringRoutePublic:
    Type: AWS::EC2::Route
    Condition: HasPeerVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref PeerVPCCidr
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PeeringRoutePrivate1:
    Type: AWS::EC2::Route
    Condition: HasPeerVPC
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: !Ref PeerVPCCidr
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PeeringRoutePrivate2:
    Type: AWS::EC2::Route
    Condition: HasPeerVPC
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: !Ref PeerVPCCidr
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

Conditions:
  HasPeerVPC: !Not [!Equals [!Ref PeerVPCId, ""]]

Outputs:
  VPCId:
    Description: "ID de la VPC creada"
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCId

  PublicSubnet1Id:
    Description: "ID de la subred pública 1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1Id

  PublicSubnet2Id:
    Description: "ID de la subred pública 2"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: "ID de la subred privada 1"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: "ID de la subred privada 2"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2Id

  NatGatewayId:
    Description: "ID del NAT Gateway"
    Value: !Ref NatGateway
    Export:
      Name: !Sub ${AWS::StackName}-NatGatewayId
