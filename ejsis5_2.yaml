AWSTemplateFormatVersion: "2010-09-09"
Description: Despliegue de NextCloud con alta disponibilidad en AWS

Resources:
  # VPC
  JDGVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: VPC-JDG-CF

  # Subredes públicas y privadas
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JDGVPC
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: Public-Subnet-1-CF

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JDGVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: Private-Subnet-1-CF

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JDGVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: Public-Subnet-2-CF

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JDGVPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: Private-Subnet-2-CF

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC-JDG-InternetGateway-CF

  # NatGatewayEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc

  # # NAT Gateway
  # NatGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt ElasticIP.NatGatewayEIP
  #     SubnetId: !Ref PublicSubnet1

  # Elastic IP para el NAT Gateway
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # RDS MariaDB Multi-AZ
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: "mariadb"
      EngineVersion: "10.5"
      MultiAZ: true
      DBName: "NextCloudDB"
      MasterUsername: "admin"
      MasterUserPassword: "yourpassword"
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBInstanceIdentifier: "NextCloudRDS"

  # Grupo de Seguridad para RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS"
      VpcId: !Ref JDGVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: "10.0.0.0/16"

  # EFS File System
  EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: NextCloudEFS-CF

  # Montaje de EFS en subredes privadas
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # Grupo de Seguridad para EFS
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EFS"
      VpcId: !Ref JDGVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "2049"
          ToPort: "2049"
          CidrIp: "10.0.0.0/16"

  # Instancias EC2 para NextCloud (Auto Scaling)
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-xxxxxxxxxxxxxxxxx # Debes usar la AMI de Ubuntu 24.04 server
      InstanceType: t3.micro
      KeyName: nextcloudkey
      SecurityGroups:
        - !Ref WebSecurityGroup
      UserData: |
        # Script para instalar Apache, NextCloud, y montar EFS y conectar a RDS
        # Aquí va el script de configuración de la instancia

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EC2 instances"
      VpcId: !Ref JDGVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: "2"
      MaxSize: "6"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      LoadBalancerNames:
        - !Ref ALB

  # Balanceador de Carga
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "NextCloud-ALB"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"

  # Grupo de Seguridad del ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId: !Ref JDGVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  # Target Group para el ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "NextCloudTargetGroup"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref JDGVPC
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP

Outputs:
  VPCId:
    Value: !Ref JDGVPC
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
